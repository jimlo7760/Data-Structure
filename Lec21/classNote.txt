for each:
std::for_each(my_data.begin(), my_data.end(), (custom function to each element));
lambda function:
std::for_each(my_data.begin(), my_data.end(), [](float f){ std::cout << f << std::endl;});

STL less class:
std::sort(my_data.begin(), my_data.end()) is translated to
std::sort(my_data.begin(), my_data.end(), std::less<float>())
template <class T>
class less{
public:
    bool operator() (const T& x, const T& y) const {return x < y; }
}
compared to:
std::sort(my_data.begin(), my_data.end(), custom_func)
std::les<float> is more generalize

STL find_if
class between_values{
private:
    float low, high;
public:
    between_values(float 1, float h): low(l), high(h) {}
    bool operator() (float val) {return low <= val && val <= high;}
}
functor:
between_values two_and_four(2, 4);
if (std::find_if(my_data.begin(), my_data.end(), two_and_four) != my.data.end()){
    std::cout << "Found a value greater than 2 & less than 4!" << std::endl;
}
== for (itr my_data.begin(); itr != my_data.end(); itr++){
    two_and_four(*itr);
}

ds_hashset<std::string, MyHashFunctor> my_hashset;
reason why need functor here: only accept class in c++ < >

STL hash table: unordered map:
std::unordered_map<std::string, Foo, MyHashFunctor> m;
Foo: a templated type

Eliminate collision:
1, Separate chaining:
    create a linked-list when there is a collision in a slot
2. Open spacing (Linear probing):
    if i%N is occupied, store in (i+1)%N. or if (i+1)%N is occupied, store in (i+2)%N etc.
    Finding in the hash table (top-level array):
    when we reach a empty spaces after the that hash_value position, it is not exist.
3. Open spacing (Quadratic probing):
    if i%N is occupied, stored in (i+1)%N, or if (i+1)%N is occupied, stored in (i+2*2)%N, (i+3*3)%N...
4. Open spacing (Secondary hashing):
    Hash it again when 2 values are collided

