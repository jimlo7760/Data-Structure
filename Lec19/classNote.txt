Find the highest in the tree
Running time: O(n): traverse all the nodes
Memory use: best/avg: O(logn), worst: O(n): stack use of the program (how much complexity of the recursion
        until it reaches a return value (leaf node in this case).
unsigned int height (Node* p){
    if (!p){
        return 0;
    }
    return 1 + std::max(height(p->left), height(p->right));
}

When calculating the O(n) of a tree, the number of nodes WOULD NOT be 1, but 100,000.

Shortest path to a leaf node:
unsigned int shortest_path(Node* p){
    if (!p_{
        return 0;
    }
    return 1 + std::min(height(p->left), height(p->right));
    // depth_first, because it will get all the lef nodes before implementing the right nodes
}

Running time/ memory use: best: O(1), avg: O(logn), worst: O(n)
unsigned int shortest_path_breath(Node* P){
    unsigned int level = 0;
    std::vector<Node*> current_level;
    std::vector<Node*> next_level;      // store the whole layer
    if (root == NULL){
        return level;
    }
    current_level.push_back(root);
    while (current_level.size() != 0{
        level++;
        for (unsigned int i = 0; i < current_level.size(): i++){
            if (current_level[i] -> left != NULL){      // consider the extremely unbalanced tree
                next_level.push_back(current_level[i]->left);
            }else{
                return level;
            }
            if (current_level[i] -> right != NULL{
                next_level.push_back(current_level[i] -> right);
            }else{
                return level;
            }
        }
        current_level = next_level;
        next_level.clear();
    }
}

Erase:
bigO: best: O(1), avg: O(logn), worst: O(n);
4 cases:
no children: directly remove
only left children: move the whole left sub-tree to the current node
only right children: move the whole right sub-tree to the current node
both left & right children: move the biggest element in the left children to the erased node position
int erase(T const& key_value, Node* &p){
    // not found
    if (p == NULL){
        return 0;
    }
    if (p -> val == key_value){
        // case 1
        if (!p -> left && !p -> right){
            delete p;   // delete the end of the arrow
            p = NULL;   // set the arrow from its parent to NULL (or the pointer to the root)
            return 1;
        }else if (p -> left == NULL){
        // case 3:
            Node* temp = p -> right;
            temp -> parent = p -> parent;
            delete p;
            p = temp;
            return 1;
        }else if (p -> right == NULL){
        // case 2:
            Node* temp = p -> left;     // temp variable points to the subtree
            temp -> parent = p -> parent;
            delete p;       // delete the end of the arrow
            p = temp;       // parent's left point to the "new" subtree
            return 1;
        }else{
        // case 3:
            Node temp = p -> left;  // now temp is the left subtree
            while (temp -> right){
                temp = temp -> right;   // find the largest element in the left sub-tree
            }
            p -> value = temp -> value;
            return erase( p -> value, temp);       // delete the "largest" node, search among the left subtree
        }else if (key_value < p -> value){
            return erase(key_value, p -> left);     // go left
        }else{
            return erase(key_value, p -> right);    // go right
        }
    }
}